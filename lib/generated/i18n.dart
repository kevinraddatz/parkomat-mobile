import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get couldNotConnect => "Could not connect to parkomat";
  String get couldNotGetStats => "Could not fetch stats from parkomat";
  String get lastMonth => "Last month";
  String get lastUpdated => "Last updated: ";
  String get lastWeek => "Last week";
  String get lastYear => "LastYear";
  String get onTheLifts => "on the lifts";
  String get one => "one";
  String get oneStandard => "one standard";
  String get parkingSpots => "Parking spots";
  String get standard => "standard";
  String get today => "Today";
  String get urlToParkomat => "URL to your parkomat";
  String get yesterday => "Yesterday";
  String get yourParkomat => "\nScincerly -- your parkomat.";
  String statsDescription(String normal, String lift) => "$normal and $lift";
  String statsShareTitle(String number) => "There are $number free parking spots.";
  String outdatedVersion(String version) => "There is a new app version: $version";
}

class $de extends S {
  const $de();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get standard => "normale";
  @override
  String get couldNotGetStats => "Konnte keine Daten abrufen";
  @override
  String get one => "einer";
  @override
  String get couldNotConnect => "Konnte keine Verbindung aufbauen";
  @override
  String get lastMonth => "Letzten Monat";
  @override
  String get yourParkomat => "\nMit freundlichen Grüßen -- dein Parkomat.";
  @override
  String get oneStandard => "ein normaler";
  @override
  String get lastWeek => "Letzte Woche";
  @override
  String get yesterday => "Gestern";
  @override
  String get lastUpdated => "Letztes Update: ";
  @override
  String get onTheLifts => "auf der Hebebühne";
  @override
  String get lastYear => "Letztes Jahr";
  @override
  String get today => "Heute";
  @override
  String get parkingSpots => "Parkplätze";
  @override
  String get urlToParkomat => "URL zum Parkomat";
  @override
  String statsShareTitle(String number) => "Es gibt $number freie Parkplätze.";
  @override
  String statsDescription(String normal, String lift) => "$normal und $lift";
  @override
  String outdatedVersion(String version) => "Es gibt eine neue Version der App: $version";
}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("de", ""),
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "de":
          S.current = const $de();
          return SynchronousFuture<S>(S.current);
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        default:
        // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null ? null : l.countryCode != null && l.countryCode.isEmpty ? l.languageCode : l.toString();
